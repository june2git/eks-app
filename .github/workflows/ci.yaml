# 워크플로우 이름: GitHub Actions UI에 표시되는 이름
name: EKS Apps CI/CD

# 워크플로우 트리거 조건: 언제 이 워크플로우가 실행될지 정의
on:
  # Push 이벤트 트리거
  push:
    branches: [ main ]  # main 브랜치에 push될 때만 실행
    paths:              # 특정 경로의 파일이 변경될 때만 실행 (효율성)
      - 'demo/**'                    # demo 앱 변경 시
      - 'go/kafka-producer/**'       # kafka-producer 앱 변경 시
      - 'go/kafka-consumer/**'       # kafka-consumer 앱 변경 시
      - '.github/workflows/**'       # 워크플로우 파일 자체가 변경될 때
  
  # Pull Request 이벤트 트리거
  pull_request:
    branches: [ main ]  # main 브랜치로의 PR 생성/업데이트 시
    paths:              # PR에서 변경된 파일이 아래 경로에 있을 때만 실행
      - 'demo/**'                    # demo 앱 변경 시
      - 'go/kafka-producer/**'       # kafka-producer 앱 변경 시
      - 'go/kafka-consumer/**'       # kafka-consumer 앱 변경 시
  
  # 수동 트리거 (GitHub UI에서 직접 실행 가능)
  workflow_dispatch:
    inputs:
      app:
        description: '배포할 애플리케이션 선택 (all/demo/producer/consumer)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - demo
          - producer
          - consumer

# 권한 설정: 이 워크플로우가 GitHub 및 AWS에서 가질 수 있는 권한
permissions:
  contents: read      # 저장소 내용 읽기 권한 (코드 체크아웃)
  id-token: write     # OIDC 토큰 발급 권한 (AWS IAM 역할 assume에 필요)

# 실행할 Job 정의
jobs:
  # Job 1: 변경된 파일 감지
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      demo: ${{ steps.filter.outputs.demo }}
      producer: ${{ steps.filter.outputs.producer }}
      consumer: ${{ steps.filter.outputs.consumer }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            demo:
              - 'demo/**'
            producer:
              - 'go/kafka-producer/**'
            consumer:
              - 'go/kafka-consumer/**'

  # Job 2: Demo App 빌드 및 배포
  build-demo:
    needs: detect-changes
    # demo 앱이 변경되었거나, workflow_dispatch에서 demo/all 선택 시 실행
    if: |
      needs.detect-changes.outputs.demo == 'true' || 
      github.event.inputs.app == 'demo' || 
      github.event.inputs.app == 'all'
    uses: june2git/devops-templates/.github/workflows/build_and_push_template.yaml@main
    secrets:
      GITOPS_PAT: ${{ secrets.GITOPS_PAT }}
    with:
      app_name: demo
      build_system: gradle
      dockerfile: demo/Dockerfile
      context: demo
      ecr_repo: demo-app
      aws_region: ap-northeast-2
      gitops_repo: june2git/gitops
      values_file: charts/values-prod.yaml

  # Job 3: Kafka Producer 빌드 및 배포
  build-producer:
    needs: detect-changes
    # producer 앱이 변경되었거나, workflow_dispatch에서 producer/all 선택 시 실행
    if: |
      needs.detect-changes.outputs.producer == 'true' || 
      github.event.inputs.app == 'producer' || 
      github.event.inputs.app == 'all'
    uses: june2git/devops-templates/.github/workflows/build_and_push_template.yaml@main
    secrets:
      GITOPS_PAT: ${{ secrets.GITOPS_PAT }}
    with:
      app_name: kafka-producer
      build_system: go
      go_version: '1.23'
      dockerfile: go/kafka-producer/Dockerfile
      context: go/kafka-producer
      ecr_repo: kafka-producer
      aws_region: ap-northeast-2
      gitops_repo: june2git/gitops
      values_file: charts/kafka-apps-values.yaml
      values_prefix: producer

  # Job 4: Kafka Consumer 빌드 및 배포
  build-consumer:
    needs: detect-changes
    # consumer 앱이 변경되었거나, workflow_dispatch에서 consumer/all 선택 시 실행
    if: |
      needs.detect-changes.outputs.consumer == 'true' || 
      github.event.inputs.app == 'consumer' || 
      github.event.inputs.app == 'all'
    uses: june2git/devops-templates/.github/workflows/build_and_push_template.yaml@main
    secrets:
      GITOPS_PAT: ${{ secrets.GITOPS_PAT }}
    with:
      app_name: kafka-consumer
      build_system: go
      go_version: '1.23'
      dockerfile: go/kafka-consumer/Dockerfile
      context: go/kafka-consumer
      ecr_repo: kafka-consumer
      aws_region: ap-northeast-2
      gitops_repo: june2git/gitops
      values_file: charts/kafka-apps-values.yaml
      values_prefix: consumer
